integer first_row_width=0

promptMail () {
    if ! which mail 2>&1 >/dev/null || ! mail -e; then
        return
    fi
    count=$[$(mail -H | wc -l) - 2]
    print -n "── [\e[35;1mmail\e[0m:\e[35;1m$count\e[0m] "
    (( first_row_width += 11 + $#count ))
}

promptHg () {
    if hg status >/dev/null 2>&1; then
	local branch=$(hg branch)
	local revision=$(hg identify | cut -d' ' -f1)
	print -n "── [\e[31m$branch\e[0m:\e[31m$revision\e[0m] "
	(( first_row_width += 7 + $#branch + $#revision ))
	if [[ $(hg status | grep '^M' | wc -l) -ne 0 ]]; then
	    print -n "\e[41;37;1m!\e[0m "
	    (( first_row_width += 2 ))
	fi
    fi
}

promptGit () {
    if ! which git 2>&1 >/dev/null; then;
        return
    fi
    if git rev-parse --git-dir >/dev/null 2>&1; then
	local branch=$(git symbolic-ref HEAD 2>/dev/null | cut -d'/' -f3-)
	local revision=$(git rev-parse --short --verify HEAD)
	print -n "── [\e[34;1m$branch\e[0m:\e[34;1m$revision\e[0m] "
	(( first_row_width += 7 + $#branch + $#revision ))
	if [[ $(git status --short --untracked-files=no | wc -l) -ne 0 ]]; then
	    print -n "\e[44;37;1m!\e[0m "
	    (( first_row_width += 2 ))
        fi
    fi
}

export VIRTUAL_ENV_DISABLE_PROMPT=yes
promptVenv () {
    if [[ -n $VIRTUAL_ENV ]]; then
	local venv=$(basename $VIRTUAL_ENV)
	print -n "── \e[33m($venv)\e[0m "
	(( first_row_width += 6 + $#venv ))
    fi
}

promptDate () {
    local now="$(date +'%B %e, %I:%M %p')"
    print -n "── $now "
    (( first_row_width += 4 + $#now ))
}

promptCwd () {
    local pwd=$(pwd)
    local cwd="$(print -P %~)"
    local h="$(basename $cwd)"
    local t="$(dirname $cwd)"
    if [[ $t == '.' || ( $t == '/' && $h == '/' ) ]]; then
	t=''
    elif [[ $t == '/' ]]; then
    else
	t="$t/"
    fi
    if [[ -n $VIRTUAL_ENV && $pwd == $VIRTUAL_ENV* ]]; then
        t="\e[33m...\e[0m"
        if [[ $pwd != $VIRTUAL_ENV ]]; then
            t+=$(dirname $(echo $pwd | sed "s#$VIRTUAL_ENV##"))
	    if [[ ! $t == */ ]]; then
		t+="/"
	    fi
	else
	    h=""
	fi
	(( first_row_width -= 11 ))
    fi
    print -n "\e[0m$t\e[1m$h\e[0m "
    (( first_row_width += 1 + $#h + $#t ))
}

promptTitle () {
    print -Pn "%{\e]2;%n@%m: %~\a%}"
}

prompt () {
    print '%{'
    # First row
    print -n "┌─── "
    (( first_row_width += 5 ))
    promptTitle
    promptCwd
    promptDate
    promptMail
    promptVenv
    promptGit
    promptHg
    while [[ $first_row_width -lt 28 ]]; do
	print -n "─"
	(( first_row_width += 1 ))
    done
    print "─┐"
    (( first_row_width += 2 ))

    # Second row
    print -n "│\e[42;37;1mdr\e[0m "
    integer second_row_width=4
    print -n "\e[1m$USER\e[0m@"
    (( second_row_width += $#USER + 1 ))
    tmp=$( echo $HOST | sed 's/\..*$//' )
    print -n "\e[32m$tmp\e[0m "
    (( second_row_width += $#tmp + 1))
    local history_number='%!'
    print -n "── [\e[36m$history_number\e[0m] "
    (( second_row_width += 6 ))
    (( second_row_width += $#history_number ))
    integer bar_width=$(( $first_row_width - $second_row_width ))
    while [[ $bar_width > 1 ]]; do
	print -n "─"
	(( bar_width -= 1 ))
    done
    print "┘"

    # Third row
    print -n "└ "
    integer third_row_width=13
    (( third_row_width += $#history_number ))
    if [[ $EUID == 0 ]]; then
	print -n "\e[37;41;1m#\e[0m"
    else
	print -n "\e[1m$\e[0m"
    fi
    print -n ' %4G%}' # replace the number with the width of the last line
}

prompt2 () {
    print -n "│ > "
}

rprompt () {
    local last_status=$?
    if [[ $last_status != 0 ]]; then
        local current='%!'
        integer last=${(%)current}-1
        print "%F{cyan}$last%F{red} failed with status %B${last_status}%b"
    fi
}
